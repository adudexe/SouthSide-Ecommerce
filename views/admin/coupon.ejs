<%- include("../partials/admin/header.ejs") %>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
    .empty-state {
        min-height: 300px;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        color: #6c757d;
    }
    .empty-state i {
        font-size: 48px;
        margin-bottom: 1rem;
    }
</style>

<!-- <p>Coupons<%= Coupons.length %></p> -->


<section class="content-main">
    <div class="content-header">
        <div>
            <h2 class="content-title card-title">Coupon Management</h2>
        </div>
        <div>
            <button class="btn btn-primary btn-sm rounded" data-bs-toggle="modal" data-bs-target="#addCouponModal">
                Add New Coupon
            </button>
        </div>
    </div>

    <div class="card mb-4">
        <header class="card-header">
            <div class="row align-items-center">
                <div class="col-md-3">Code</div>
                <div class="col-md-3">Amount</div>
                <!-- <div class="col-md-3">Status</div> -->
                <div class="col-md-3 text-end">Actions</div>
            </div>
        </header>
        <% if (!Coupons || Coupons.length === 0) { %>
            <div class="empty-state">
                <i class="bi bi-ticket-perforated"></i>
                <h5>No Coupons Found</h5>
                <p>Create your first coupon by clicking the 'Add New Coupon' button</p>
            </div>

        <% } else { %>
            <% Coupons.forEach(element => { %>
            <div class="card-body" id="couponList">
                <div class="row align-items-sm-center">
                    <div class="col-md-3">
                        <strong><%= element.code %></strong>
                    </div>
                    <div class="col-md-3">
                        <% if (element.type == "fixed") { %>
                            ₹ <%= element.discount %>
                        <% } else { %>
                            % <%= element.discount %>
                        <% } %>
                    </div>
                    <!-- <div class="col-md-3">
                        <span class="badge rounded-pill 'bg-success' ">
                            'Active' 
                        </span>
                    </div> -->
                    <div class="col-md-3 text-end">
                        <button class="btn btn-sm btn-danger" onclick="deleteCoupon('<%=element._id%>')">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </div>
            </div>
            <% }) %>
        <% } %> 
        
        
    </div>

    <!-- Add Coupon Modal -->
    <div class="modal fade" id="addCouponModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Coupon</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form action="/admin/coupons/add" method="POST" id="addCouponForm">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Discount Type</label>
                            <select class="form-select" name="discountType" id="discountType">
                                <option value="fixed" selected>Fixed Amount</option>
                                <option value="percentage">Percentage</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Coupon Code</label>
                            <input type="text" class="form-control" name="code" id="couponCode" 
                                onkeyup="this.value = this.value.toUpperCase();">
                            <small class="text-danger d-none" id="codeError"></small>
                        </div>
                        <div class="mb-3" style="display: none;">
                            <label class="form-label">Discount Type</label>
                            <select class="form-select" name="discountType">
                                <option value="fixed" selected>Fixed Amount</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Discount Amount (₹)</label>
                            <input type="number" class="form-control" name="discountAmount" id="discountAmount">
                            <small class="text-danger d-none" id="discountError"></small>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Minimum Purchase Amount (₹)</label>
                            <input type="number" class="form-control" name="minPurchase" id="minPurchase">
                            <small class="text-danger d-none" id="minPurchaseError"></small>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" onclick="validateAndSubmit(event)">Add Coupon</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</section>

<script>
function showError(inputElement, errorElement, message) {
    inputElement.style.borderColor = '#dc3545';
    errorElement.textContent = message;
    errorElement.classList.remove('d-none');
}

function clearError(inputElement, errorElement) {
    inputElement.style.borderColor = '';
    errorElement.classList.add('d-none');
}

function clearAllErrors() {
    const inputs = document.querySelectorAll('#addCouponForm input');
    inputs.forEach(input => {
        const errorElement = document.getElementById(input.id + 'Error');
        if (errorElement) {
            clearError(input, errorElement);
        }
    });
}

// async function validateAndSubmit(e) {
//     clearAllErrors();
    
//     let isValid = true;
    
//     // Get form elements
//     const form = document.getElementById('addCouponForm');
//     const codeInput = document.getElementById('couponCode');
//     const discountInput = document.getElementById('discountAmount');
//     const minPurchaseInput = document.getElementById('minPurchase');
    
//     const codeError = document.getElementById('codeError');
//     const discountError = document.getElementById('discountError');
//     const minPurchaseError = document.getElementById('minPurchaseError');

//     // Validate Coupon Code
//     const codePattern = /^[A-Za-z0-9]{6,12}$/;
//     if (!codeInput.value) {
//         showError(codeInput, codeError, 'Coupon code is required');
//         isValid = false;
//     } else if (!codePattern.test(codeInput.value)) {
//         showError(codeInput, codeError, 'Coupon code must be 6-12 characters long and can only contain letters and numbers');
//         isValid = false;
//     }
    
//     // Validate Discount Amount
//     const discountAmount = parseFloat(discountInput.value);
//     if (!discountInput.value) {
//         showError(discountInput, discountError, 'Discount amount is required');
//         isValid = false;
//     } else if (isNaN(discountAmount) || discountAmount < 1 || discountAmount > 10000) {
//         showError(discountInput, discountError, 'Discount amount must be between ₹1 and ₹10,000');
//         isValid = false;
//     }
    
//     // Validate Minimum Purchase Amount
//     const minPurchase = parseFloat(minPurchaseInput.value);
//     if (!minPurchaseInput.value) {
//         showError(minPurchaseInput, minPurchaseError, 'Minimum purchase amount is required');
//         isValid = false;
//     } else if (isNaN(minPurchase) || minPurchase < 1 || minPurchase > 100000) {
//         showError(minPurchaseInput, minPurchaseError, 'Minimum purchase amount must be between ₹1 and ₹100,000');
//         isValid = false;
//     }
    
//     // Check if discount is less than minimum purchase
//     if (isValid && discountAmount >= minPurchase) {
//         showError(discountInput, discountError, 'Discount amount must be less than minimum purchase amount');
//         isValid = false;
//     }
    
//     if (isValid) {
//         try {
//             const data = {
//                 type:[],
//                 code: codeInput.value,
//                 discount: discountInput.value,
//                 minAmount: minPurchaseInput.value
//             };

//             // Show loading state
//             Swal.fire({
//                 title: 'Adding Coupon...',
//                 text: 'Please wait',
//                 allowOutsideClick: false,
//                 showConfirmButton: false,
//                 willOpen: () => {
//                     Swal.showLoading();
//                 }
//             });

//             const response = await fetch("/admin/coupons/add", {
//                 method: "POST",
//                 headers: {
//                     "Content-Type": "application/json",
//                 },
//                 body: JSON.stringify(data)
//             });
            
//             const responseData = await response.json();
            
//             if (responseData.success) {
//                 // Close modal
//                 const modal = bootstrap.Modal.getInstance(document.getElementById('addCouponModal'));
//                 modal.hide();
                
//                 // Reset form
//                 form.reset();
                
//                 // Show success message
//                 await Swal.fire({
//                     icon: 'success',
//                     title: 'Success!',
//                     text: 'Coupon added successfully',
//                     timer: 1500
//                 });
                
//                 // Reload page to show new coupon
//                 window.location.reload();
//             } else {
//                 Swal.fire({
//                     icon: 'error',
//                     title: 'Error!',
//                     text: responseData.message || 'Failed to add coupon'
//                 });
//             }
//         } catch (error) {
//             console.error("Error:", error);
//             Swal.fire({
//                 icon: 'error',
//                 title: 'Error!',
//                 text: 'Failed to add coupon. Please try again.'
//             });
//         }
//     }
// }
async function validateAndSubmit(e) {
    clearAllErrors();
    
    let isValid = true;
    
    // Get form elements
    const form = document.getElementById('addCouponForm');
    const codeInput = document.getElementById('couponCode');
    const discountInput = document.getElementById('discountAmount');
    const minPurchaseInput = document.getElementById('minPurchase');
    const discountTypeInput = document.getElementById('discountType');
    //     const form = document.getElementById('addCouponForm');
//     const codeInput = document.getElementById('couponCode');
//     const discountInput = document.getElementById('discountAmount');
//     const minPurchaseInput = document.getElementById('minPurchase');
    
    const codeError = document.getElementById('codeError');
    const discountError = document.getElementById('discountError');
    const minPurchaseError = document.getElementById('minPurchaseError');

    // Validate Coupon Code
    const codePattern = /^[A-Za-z0-9]{6,12}$/;
    if (!codeInput.value) {
        showError(codeInput, codeError, 'Coupon code is required');
        isValid = false;
    } else if (!codePattern.test(codeInput.value)) {
        showError(codeInput, codeError, 'Coupon code must be 6-12 characters long and can only contain letters and numbers');
        isValid = false;
    }
    
    // Validate Discount Amount
    const discountAmount = parseFloat(discountInput.value);
    const discountType = discountTypeInput.value;
    
    if (!discountInput.value) {
        showError(discountInput, discountError, 'Discount amount is required');
        isValid = false;
    } else if (isNaN(discountAmount) || (discountType === 'fixed' && (discountAmount < 1 || discountAmount > 10000)) || (discountType === 'percentage' && (discountAmount < 1 || discountAmount > 100))) {
        const message = discountType === 'fixed' 
            ? 'Discount amount must be between ₹1 and ₹10,000' 
            : 'Discount percentage must be between 1% and 100%';
        showError(discountInput, discountError, message);
        isValid = false;
    }
    
    // Validate Minimum Purchase Amount
    const minPurchase = parseFloat(minPurchaseInput.value);
    if (!minPurchaseInput.value) {
        showError(minPurchaseInput, minPurchaseError, 'Minimum purchase amount is required');
        isValid = false;
    } else if (isNaN(minPurchase) || minPurchase < 1 || minPurchase > 100000) {
        showError(minPurchaseInput, minPurchaseError, 'Minimum purchase amount must be between ₹1 and ₹100,000');
        isValid = false;
    }
    
    // Check if discount is less than minimum purchase
    if (isValid && discountAmount >= minPurchase) {
        showError(discountInput, discountError, 'Discount amount must be less than minimum purchase amount');
        isValid = false;
    }
    
    if (isValid) {
        try {
            const data = {
                code: codeInput.value,
                discount: discountInput.value,
                minAmount: minPurchaseInput.value,
                type: discountType // Send the discount type (fixed or percentage)
            };

            console.log("data is",data)

            // Show loading state
            Swal.fire({
                title: 'Adding Coupon...',
                text: 'Please wait',
                allowOutsideClick: false,
                showConfirmButton: false,
                willOpen: () => {
                    Swal.showLoading();
                }
            });

            const response = await fetch("/admin/coupons/add", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(data)
            });
            
            const responseData = await response.json();
            
            if (responseData.success) {
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('addCouponModal'));
                modal.hide();
                
                // Reset form
                form.reset();
                
                // Show success message
                await Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'Coupon added successfully',
                    timer: 1500
                });
                
                // Reload page to show new coupon
                window.location.reload();
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: responseData.message || 'Failed to add coupon'
                });
            }
        } catch (error) {
            console.error("Error:", error);
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'Failed to add coupon. Please try again.'
            });
        }
    }
}


// Function to delete coupon
async function deleteCoupon(couponId) {
    const result = await Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
    });

    if (result.isConfirmed) {
        try {
            // Show loading state
            Swal.fire({
                title: 'Deleting...',
                text: 'Please wait',
                allowOutsideClick: false,
                showConfirmButton: false,
                willOpen: () => {
                    Swal.showLoading();
                }
            });

            const response = await fetch(`/admin/coupons/delete/${couponId}`, {
                method: 'DELETE',
            });
            
            const data = await response.json();
            
            if (data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Deleted!',
                    text: 'Coupon has been deleted.',
                    timer: 1500
                });
                window.location.reload();
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: data.message || 'Failed to delete coupon'
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'Failed to delete coupon. Please try again.'
            });
        }
    }
}
</script>

<%- include("../partials/admin/footer.ejs") %>
