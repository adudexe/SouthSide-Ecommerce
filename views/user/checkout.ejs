<%- include('../partials/user/header') %>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>  
<style>
    .billing-details-wrap {
        min-height: auto !important;
        height: auto !important;
    }
    
    .address-container {
        max-height: fit-content;
    }
    
    .compact-address {
        font-size: 0.95rem;
    }
    
    .compact-address p {
        line-height: 1.4;
    }
    
    .address-details {
        max-height: fit-content;
    }
</style>

<main class="main">
    <div class="page-header breadcrumb-wrap">
        <div class="container">
            <div class="breadcrumb">
                <a href="/user/home" class="text-brand">Home</a>
                <span></span> Shop
                <span></span> Checkout
            </div>
        </div>
    </div>

    <section class="mt-50 mb-50">
        <div class="container">
            <div class="row">
                <!-- Order Summary Section (Left Side - 8 columns) -->
                <div class="col-lg-8">
                    <div class="order-summary bg-white p-4 rounded shadow-sm mb-4">
                        <h4 class="mb-4">Order Summary</h4>
                        <p><%= //cart.items %></p>
                        
                        
                        
                        <div class="order-products mb-4">
                            <% cart.items.forEach(function(item) { %>
                                    <!-- <p>Cart<%= //item.variantId %></p> -->
                                <% let cartItem = variants.find(function(variant) { 
                                   return  (variant._id).toString() ==  (item.variantId).toString()    
                                }); %>
                                 <!-- <p>Cart Item<%= //cartItem %></p> -->
                                
                            <div class="d-flex align-items-center mb-3 pb-3 border-bottom">
                                <!-- <p><%= //item.productId%></p> -->
                                <img src="/<%= item.productId.productImages[0] %>" alt="Product" class="img-fluid rounded" style="width: 80px; height: 80px; object-fit: cover;">
                                <div class="ms-3 flex-grow-1">
                                    <h6 class="mb-0"><%= item.productId.productName %></h6>
                                    <small class="text-muted">Size: <%= cartItem.size %></small>
                                    <br>
                                    <small class="text-muted">Color: <%= cartItem.color %></small>
                                    <br>
                                    <small class="text-muted">Qty: <%= item.quantity %></small>
                                </div>
                                <div class="ms-3">
                                    <span class="fw-bold">₹<%= cartItem.salePrice * item.quantity %></span>
                                </div>
                            </div>
                            <% }); %>
                        </div>


                        <div class="order-total" id="order-totals">
                            <div class="d-flex justify-content-between mb-2">
                                <span>Subtotal</span>
                                <span class="fw-bold total-amount"><%= total %> </span>
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <span>Shipping</span>
                                <span class="fw-bold">₹ 0</span>
                            </div>
                            <div class="d-flex justify-content-between border-top pt-3 mt-3">
                                <span class="h5 mb-0">Total</span>
                                <span class="h5 mb-0 text-brand">₹<%= total %></span>
                            </div>
                        </div>

                        <!-- Payment Methods -->
                        <div class="payment-methods mt-4 pt-4 border-top" id="payment-methods">
                            <h5 class="mb-3">Payment Method</h5>    
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="radio" name="payment_option" id="online" value="online">
                                <label class="form-check-label" for="online">
                                    Razor Pay
                                </label>
                            </div>
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="radio" name="payment_option" id="wallet" value="wallet">
                                <label class="form-check-label" for="walet">
                                    Wallet
                                </label>
                            </div>

                            <% if (total>1000) { %>
                                <div class="form-check mb-3" id="cod">
                                    <input class="form-check-input" type="radio" name="payment_option" id="cod" value="cod" checked>
                                    <label class="form-check-label" for="cod">
                                        Cash on Delivery
                                    </label>
                                </div>
                            <% } %>
                            <!-- Place Order Button -->
                            <button type="button" class="btn btn-primary w-100 mt-3" onclick="placeOrder()">
                                Place Order
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Address Section (Right Side - 4 columns) -->
                <div class="col-lg-4">
                    <div class="billing-details-wrap bg-white p-4 rounded shadow-sm h-100">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <h4 class="mb-0">Delivery Address</h4>
                            <% if (!userAddress || !userAddress.some(addr => addr.isPrimary)) { %>
                                <button class="btn btn-sm btn-primary" id="add-new-address-btn">Add New</button>
                            <% } %>
                        </div>
                        
                        <div id="address-data" data-address="<%=JSON.stringify(userAddress)%>" class="d-none"></div>
                        
                        <div id="primary-address">
                            <% if (userAddress) { %>
                                <% userAddress.forEach(element => { %>
                                    <% if (element.isPrimary) { %>
                                        <div class="address-details">
                                            <div class="border-bottom pb-3 mb-3">
                                                <p class="mb-1"><strong><%= element.name %></strong></p>
                                                <p class="mb-1"><%= element.street %></p>
                                                <p class="mb-1"><%= element.city %>, <%= element.state %></p>
                                                <p class="mb-1"><%= element.postalCode %></p>
                                                <p class="mb-1">Phone: <%= element.phone %></p>
                                            </div>
                                            <button class="btn btn-outline-primary btn-sm" id="change-address-btn">
                                                Change Address
                                            </button>
                                        </div>
                                    <% } %>
                                <% }) %>
                            <% } else { %>
                                <div class="text-center py-4">
                                    <p class="text-muted mb-3">No delivery address found</p>
                                    <button class="btn btn-primary" id="add-new-address-btn">
                                        Add New Address
                                    </button>
                                </div>
                            <% } %>
                        </div>
                    </div>
                    <div class="border-top pt-4 mb-4">
                        <h5>Available Coupons</h5>
                        <div id="couponList" style="max-height: 200px; overflow-y: auto;" class="pe-2">
                            <% if (coupons && coupons.length > 0) { %>
                                <% coupons.forEach(function(coupon) { %>
                                    <div class="border rounded p-3 mb-2 bg-light">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <h6 class="mb-1 text-primary"><%= coupon.code %></h6>
                                                <p class="mb-0 small">
                                                    <span class="text-success">₹<%= coupon.discount %> off</span>
                                                    <% if (coupon.minAmount) { %>
                                                        <span class="text-muted"> | Min. Purchase: ₹<%= coupon.minAmount %></span>
                                                    <% } %>
                                                </p>
                                            </div>
                                            <button class="btn btn-sm btn-outline-primary" 
                                                    onclick="applyCoupon('<%= coupon.code %>', '<%= coupon.discount %>', '<%= coupon.minAmount %>','<%= coupon._id%>')">
                                                Apply
                                            </button>
                                        </div>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <div class="text-center text-muted p-3">
                                    <i class="bi bi-ticket me-2"></i>No coupons available
                                </div>
                            <% } %>
                        </div>
                    </div>
                </div>
                
            </div>
        </div>
    </section>

    
</main>
<!-- Add New Address Modal -->
<div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="addAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addAddressModalLabel">Add New Address</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Address Creation Form -->
                <form id="createAddressForm">
                    <div class="mb-3 fs-2 d-flex justify-content-center">
                        <h2 for="addressNumber" class="form-label" data-address-number="<%= //address.length + 1 %>" id="addressNumber">Address <%= //address.length + 1 %></h2>
                    </div>

                    <!-- Grid Layout for the Form -->
                    <div class="row">
                        <!-- Name -->
                        <div class="col-12 col-md-6 mb-3">
                            <label for="name" class="form-label">Name</label>
                            <input type="text" class="form-control" id="name" placeholder="Enter name" required>
                        </div>
                        <!-- Street -->
                        <div class="col-12 col-md-6 mb-3">
                            <label for="street" class="form-label">Street</label>
                            <input type="text" class="form-control" id="street" placeholder="Enter street" required>
                        </div>
                    </div>

                    <div class="row">
                        <!-- City -->
                        <div class="col-12 col-md-6 mb-3">
                            <label for="city" class="form-label">City</label>
                            <input type="text" class="form-control" id="city" placeholder="Enter city" required>
                        </div>
                        <!-- State -->
                        <div class="col-12 col-md-6 mb-3">
                            <label for="state" class="form-label">State</label>
                            <input type="text" class="form-control" id="state" placeholder="Enter state" required>
                        </div>
                    </div>

                    <div class="row">
                        <!-- Postal Code -->
                        <div class="col-12 col-md-6 mb-3">
                            <label for="postalCode" class="form-label">Postal Code</label>
                            <input type="number" class="form-control" id="postalCode" placeholder="Enter postal code" required>
                        </div>
                        <!-- Phone -->
                        <div class="col-12 col-md-6 mb-3">
                            <label for="phone" class="form-label">Phone</label>
                            <input type="tel" class="form-control" id="phone" placeholder="Enter phone number" required>
                        </div>
                    </div>

                    <div class="row">
                        <!-- Country -->
                        <div class="col-12 col-md-6 mb-3">
                            <label for="country" class="form-label">Country</label>
                            <input type="text" class="form-control" id="country" placeholder="Enter country" required>
                        </div>
                        <!-- Primary Address -->
                        <div class="col-12 col-md-6 mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="isPrimary">
                            <label class="form-check-label" for="isPrimary">Set as primary address</label>
                        </div>
                    </div>

                    <!-- Submit Button -->
                    <button class="btn btn-primary" id="submitButton">Save Address</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Update Address Modal -->
<div class="modal fade" id="updateAddressModal" tabindex="-1" aria-labelledby="updateAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updateAddressModalLabel">Update Address</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Address Update Form -->
                <form id="updateAddressForm">
                    <div class="mb-3 fs-2 d-flex justify-content-center">
                        <h2 for="updateAddressNumber" class="form-label" id="updateAddressNumber">Update Address</h2>
                    </div>

                    <!-- Grid Layout for the Form -->
                    <div class="row">
                        <!-- Name -->
                        <div class="col-12 col-md-6 mb-3">
                            <label for="updateName" class="form-label">Name</label>
                            <input type="text" class="form-control" id="updateName" placeholder="Enter name" required>
                        </div>
                        <!-- Street -->
                        <div class="col-12 col-md-6 mb-3">
                            <label for="updateStreet" class="form-label">Street</label>
                            <input type="text" class="form-control" id="updateStreet" placeholder="Enter street" required>
                        </div>
                    </div>

                    <div class="row">
                        <!-- City -->
                        <div class="col-12 col-md-6 mb-3">
                            <label for="updateCity" class="form-label">City</label>
                            <input type="text" class="form-control" id="updateCity" placeholder="Enter city" required>
                        </div>
                        <!-- State -->
                        <div class="col-12 col-md-6 mb-3">
                            <label for="updateState" class="form-label">State</label>
                            <input type="text" class="form-control" id="updateState" placeholder="Enter state" required>
                        </div>
                    </div>

                    <div class="row">
                        <!-- Postal Code -->
                        <div class="col-12 col-md-6 mb-3">
                            <label for="updatePostalCode" class="form-label">Postal Code</label>
                            <input type="number" class="form-control" id="updatePostalCode" placeholder="Enter postal code" required>
                        </div>
                        <!-- Phone -->
                        <div class="col-12 col-md-6 mb-3">
                            <label for="updatePhone" class="form-label">Phone</label>
                            <input type="tel" class="form-control" id="updatePhone" placeholder="Enter phone number" required>
                        </div>
                    </div>

                    <div class="row">
                        <!-- Country -->
                        <div class="col-12 col-md-6 mb-3">
                            <label for="updateCountry" class="form-label">Country</label>
                            <input type="text" class="form-control" id="updateCountry" placeholder="Enter country" required>
                        </div>
                        <!-- Primary Address -->
                        <div class="col-12 col-md-6 mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="updateIsPrimary">
                            <label class="form-check-label" for="updateIsPrimary">Set as primary address</label>
                        </div>
                    </div>

                    <!-- Submit Button -->
                    <button type="submit" class="btn btn-primary" id="updateSubmitButton">Update Address</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Edit Address Modal -->
<div class="modal fade" id="changeAddressModal" tabindex="-1" aria-labelledby="changeAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="changeAddressModalLabel">Select Address</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- List of Addresses -->
                <% if (userAddress && userAddress.length > 0) { %>
                <div class="list-group">
                    <% userAddress.forEach(function(address) { %>
                    <button class="list-group-item list-group-item-action" data-address="<%= JSON.stringify(address) %>" id="address_<%= address._id %>">
                        <p><strong>Address <%= address.addressNumber %></strong></p>
                        <p><%= address.street %>, <%= address.city %>, <%= address.state %>, <%= address.postalCode %></p>
                    </button>
                    <!-- <button >update</button> -->
                    <button type="button" class="btn btn-primary mb-4" id="update-address-btn" data-address-id="<%= address._id %>"="">Update Address</button>
                    <% }); %>
                </div>
                <% } else { %>
                <p>No addresses found. Please add an address.</p>
                <% } %>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" id="add-new-address-btn">Add New Address</button>
            </div>
        </div>
    </div>
</div>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    let totalAmount=null
    //Place Order
        function placeOrder() {
            //The Payment Mehod the address details and the product details should be sent to the backend for placing the order.
            const primaryAddress = document.querySelector('#primary-address .address-details');
            //Get the Payment Method
            // Get the selected payment option value
            const paymentOption = document.querySelector('input[name="payment_option"]:checked').value;

            // Log it to the console (optional, for debugging)
            // console.log('Selected Payment Option:', paymentOption);

            // Send the selected value to the backend using fetch
            const orderType = {"OrderType":paymentOption};
            

           


            if (!primaryAddress) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Address Required',
                    text: 'Please select or add a delivery address before placing the order.'
                });
                // return;
            }
    
            Swal.fire({
                title: 'Confirm Order',
                text: 'Are you sure you want to place this order?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, place order!',
                cancelButtonText: 'No, cancel'
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        
                        if(orderType.OrderType ==="online")
                        {

                            const amount = totalAmount || document.querySelector(".total-amount").innerText
                            // payNow();
                            // async function payNow() {
                                // Create order by calling the server endpoint
                                const response = await fetch('/user/create-order', {
                                    method: 'POST',
                                    headers: {
                                    'Content-Type': 'application/json'
                                    },
                                    // body:JSON.stringify(orderType),
                                    body: JSON.stringify({ amount, currency: 'INR', receipt: 'receipt#1', notes: {} })
                                });

                                console.log("Responce is",response)

                                const order = await response.json();
                                console.log("Order Response",order);
                                // Open Razorpay Checkout
                               if(order.succes)
                               {
                                const options = {
                                    key: order.order.payment_id, // Replace with your Razorpay key_id
                                    amount: amount, // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise
                                    currency: 'INR',
                                    name:order.order.userName,
                                    contact:order.order.phone,
                                    description: 'Test Transaction',
                                    order_id: order.order.order_id, // This is the order_id created in the backend
                                    callback_url: 'http://localhost:3000/user/order/success',// Your success URL
                                    prefill: {
                                    name:""+order.order.userName+"" ,
                                    email: ""+order.order.email+"",
                                    contact:""+order.order.phone+""
                                    },
                                    theme: {
                                    color: '#F37254'
                                    },
                                    handler: function (response) {
                                        fetch('/user/verify-payment', {
                                            method: 'POST',
                                            headers: {
                                            'Content-Type': 'application/json'
                                            },
                                            body: JSON.stringify({
                                                order:order, 
                                                razorpay_order_id: response.razorpay_order_id,
                                                razorpay_payment_id: response.razorpay_payment_id,
                                                razorpay_signature: response.razorpay_signature
                                            })
                                        }).then(res => res.json())
                                            .then(data => {
                                                // console.log("data is",data)
                                            if (data.success) {
                                                    Swal.fire({
                                                        title: "Order Placed..!",
                                                        text: "Paymet Succesfull..",
                                                        icon: "success",
                                                        // showCancelButton: true,
                                                        confirmButtonColor: "#3085d6",
                                                        cancelButtonColor: "#d33",
                                                        confirmButtonText: "Ok"
                                                        }).then((result) => {
                                                        if (result.isConfirmed) {
                                                            window.location.href = '/user/order/success';
                                                        }
                                                        });
                                                // alert("Paymet Succesfull..");
                                                
                                            } else {
                                                Swal.fire({
                                                    title: "Failed To Place Order...",
                                                    text: data.message||'Payment verification failed',
                                                    icon: "error"
                                                });
                                                // alert(data.message||'Payment verification failed');
                                            }
                                            }).catch(error => {
                                            console.error('Error:', error);
                                            alert('Error verifying payment');
                                        });
                                    }
                                };
                                // alert("Payment is online");
                                const rzp = new Razorpay(options);
                                rzp.on()
                                rzp.open('payment.failed',(response)=>{
                                    console.log("We are in failed payment");
                                    // alert("payment failed");
                                }); 
                               }   
                               else
                               {
                                    // Swal.fire({
                                    //     icon: 'error',
                                    //     title: 'Error!',
                                    //     text: order.order.message || 'Error in payment'
                                    // }); 
                                    //
                                    
                                    Swal.fire({
                                    title: 'Payment Has Failed',
                                    text: 'Would you like to retry the payment',
                                    icon: 'question',
                                    showCancelButton: true,
                                    confirmButtonColor: '#3085d6',
                                    cancelButtonColor: '#d33',
                                    confirmButtonText: 'Yes',
                                    cancelButtonText: 'No, cancel'
                                }).then(async (result) => {
                                    if (result.isConfirmed) {
                                        const options = {
                                    key: order.order.payment_id, // Replace with your Razorpay key_id
                                    amount: amount, // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise
                                    currency: 'INR',
                                    name:order.order.userName,
                                    contact:order.order.phone,
                                    description: 'Test Transaction',
                                    order_id: order.order.order_id, // This is the order_id created in the backend
                                    callback_url: 'http://localhost:3000/user/order/success',// Your success URL
                                    prefill: {
                                    name:""+order.order.userName+"" ,
                                    email: ""+order.order.email+"",
                                    contact:""+order.order.phone+""
                                    },
                                    theme: {
                                    color: '#F37254'
                                    },
                                    handler: function (response) {
                                        fetch('/user/verify-payment', {
                                            method: 'POST',
                                            headers: {
                                            'Content-Type': 'application/json'
                                            },
                                            body: JSON.stringify({
                                                order:order, 
                                                razorpay_order_id: response.razorpay_order_id,
                                                razorpay_payment_id: response.razorpay_payment_id,
                                                razorpay_signature: response.razorpay_signature
                                            })
                                        }).then(res => res.json())
                                            .then(data => {
                                                // console.log("data is",data)
                                            if (data.success) {
                                                Swal.fire({
                                                    title: "Order Placed..!",
                                                    text: "Paymet Succesfull..",
                                                    icon: "success"
                                                });
                                                // alert("Paymet Succesfull..");
                                                window.location.href = '/user/order/success';
                                            } else {
                                                Swal.fire({
                                                    title: "Failed To Place Order...",
                                                    text: data.message||'Payment verification failed',
                                                    icon: "error"
                                                });
                                                // alert(data.message||'Payment verification failed');
                                            }
                                            }).catch(error => {
                                            console.error('Error:', error);
                                            alert('Error verifying payment');
                                        });
                                    }
                                };
                                // alert("Payment is online");
                                const rzp = new Razorpay(options);
                                rzp.on()
                                rzp.open('payment.failed',(response)=>{
                                    console.log("We are in failed payment");
                                    // alert("payment failed");
                                });    
                                        }      
                                            })   
                            }
                        }
                        else if(orderType.OrderType === "wallet")
                        {
                            const response = await fetch("/user/checkout/wallet",{
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body:JSON.stringify(orderType),
                            });
                            const details = await response.json();
                            
                            if (details.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Order Placed Successfully!',
                                    text: details.message || 'Your order has been placed successfully.',
                                    showConfirmButton: false,
                                    timer: 2000
                                }).then(() => {
                                    window.location.href = '/user/order/success';
                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error!',
                                    text: details.message || 'Failed to place the order'
                                });
                            }
                        }
                        else{
                            // alert("Payment is COD");
                            const response = await fetch('/user/checkout/placeorder', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body:JSON.stringify(orderType),
                            });

                            const details = await response.json();
                            
                            if (details.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Order Placed Successfully!',
                                    text: details.message || 'Your order has been placed successfully.',
                                    showConfirmButton: false,
                                    timer: 2000
                                }).then(() => {
                                    window.location.href = '/user/order/success';
                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error!',
                                    text: details.message || 'Failed to place the order'
                                });
                            }
                        }

                        
                    } catch (error) {
                        console.log("Error in online payment");
                        console.log(error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: error||'An unexpected error occurred while placing your order'
                        });
                    }
                }
            });
        }

    async function applyCoupon(code, discount, minAmount, id) {
    const subtotal = parseFloat(document.querySelector('.total-amount').innerText);
    const orderTotal = document.querySelector('#order-totals');
    orderTotal.innerHTML = ""
    
    if (minAmount && subtotal < minAmount) {
        Swal.fire({
            icon: 'error',
            title: 'Cannot Apply Coupon',
            text: `Minimum purchase amount should be ₹${minAmount} to use this coupon`
        });
        return;
    }

    Swal.fire({
        title: 'Apply Coupon?',
        text: `Apply coupon ${code} to get ₹${discount} off?`,
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Apply',
        cancelButtonText: 'Cancel'
    }).then(async (result) => {
        if (result.isConfirmed) {
            try {
                const response = await fetch(`/user/coupon/apply/${id}`, {
                    method: "PUT",
                });
                
                const data = await response.json();
                console.log("data is",data)
                totalAmount = data.newPrice || 0;

                if (data.success) {
                    // Update order total display
                    orderTotal.innerHTML = `
                        <div class="d-flex justify-content-between mb-2">
                            <span>Subtotal</span>
                            <span class="fw-bold total-amount">₹${Math.round(data.oldPrice)}</span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Shipping</span>
                            <span class="fw-bold">Free</span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Discount</span>
                            <span class="fw-bold">-₹ ${data.couponAmount}</span>
                        </div>
                        <div class="d-flex justify-content-between border-top pt-3 mt-3">
                            <span class="h5 mb-0">Total</span>
                            <span class="h5 mb-0 text-brand">₹${Math.round(data.newPrice)}</span>
                        </div>
                    `;

                    // const cod = document.getElementById("cod");
                    const cod = document.getElementById("payment-methods").querySelector("#cod")

                    if(cod)
                    {
                        if(data.newPrice < 1000)
                        {
                            cod.innerHTML = '';
                        }
                        else
                        {
                            cod.innerHTML = `
                                <input class="form-check-input" type="radio" name="payment_option" id="cod" value="cod" checked>
                                <label class="form-check-label" for="cod">
                                    Cash on Delivery
                                </label>
                            `
                        }
                    }



                    // Disable all apply buttons
                    const couponButtons = document.querySelectorAll('#couponList button');
                    couponButtons.forEach(button => {
                        button.style.display = 'none';
                    });

                    // Find the coupon container for this code
                    const appliedCouponContainer = Array.from(document.querySelectorAll('#couponList .border')).find(container =>
                        container.querySelector('h6').textContent === code
                    );

                    if (appliedCouponContainer) {
                        // Create the remove button
                        const buttonContainer = appliedCouponContainer.querySelector('.d-flex');
                        const removeButton = document.createElement('button');
                        removeButton.classList.add('btn', 'btn-sm', 'btn-danger');
                        removeButton.textContent = 'Remove';
                        removeButton.onclick = () => removeCoupon(code, id);
                        buttonContainer.appendChild(removeButton);

                        // Add "Applied" indicator
                        const appliedBadge = document.createElement('span');
                        appliedBadge.classList.add('badge', 'bg-success', 'me-2');
                        appliedBadge.textContent = 'Applied';
                        buttonContainer.appendChild(appliedBadge);
                    }
                    console.log("data is ",data)
                    // console.log(data.message)

                    Swal.fire({
                        icon: 'success',
                        title: 'Coupon Applied!',
                        text: data.message || ` ${discount} discount has been applied to your order`,
                        timer: 1500
                    });
                } else {
                    throw new Error(data.message || 'Failed to apply coupon');
                }
            } catch (error) {
                console.error("Error applying coupon:", error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to apply coupon',
                    timer: 1500
                });
            }
        }
    });
}

async function removeCoupon(code, id) {
    try {
        const response = await fetch("/user/coupon/remove", {
            method: "GET",
        });

        const data = await response.json();
        
        if (data.success) {
            // Update the order totals display
            const orderTotal = document.querySelector("#order-totals");
            orderTotal.innerHTML = `
                <div class="d-flex justify-content-between mb-2">
                    <span>Subtotal</span>
                    <span class="fw-bold total-amount">₹${Math.round(data.totalPrice)}</span>
                </div>
                <div class="d-flex justify-content-between mb-2">
                    <span>Shipping</span>
                    <span class="fw-bold">Free</span>
                </div>
                <div class="d-flex justify-content-between border-top pt-3 mt-3">
                    <span class="h5 mb-0">Total</span>
                    <span class="h5 mb-0 text-brand">₹${Math.round(data.totalPrice)}</span>
                </div>
            `;

            const cod = document.getElementById("payment-methods").querySelector("#cod")

            if(cod)
            {
                if(data.newPrice < 1000)
                {
                    cod.innerHTML = '';
                }
                else
                {
                    cod.innerHTML = `
                        <input class="form-check-input" type="radio" name="payment_option" id="cod" value="cod" checked>
                        <label class="form-check-label" for="cod">
                            Cash on Delivery
                        </label>
                    `
                }
            }

            // Reset total amount global variable
            totalAmount = null;

            // Show all apply buttons again and remove "Applied" badges and remove buttons
            const couponContainers = document.querySelectorAll('#couponList .border');
            couponContainers.forEach(container => {
                const buttonContainer = container.querySelector('.d-flex');
                
                // Remove the "Remove" button and "Applied" badge
                const removeButton = buttonContainer.querySelector('.btn-danger');
                const appliedBadge = buttonContainer.querySelector('.badge');
                if (removeButton) removeButton.remove();
                if (appliedBadge) appliedBadge.remove();
                
                // Show the original apply button
                const applyButton = buttonContainer.querySelector('.btn-outline-primary');
                if (applyButton) applyButton.style.display = 'block';
            });

            Swal.fire({
                icon: 'success',
                title: 'Coupon Removed',
                text: data.message || 'The coupon has been removed from your order',
                timer: 1500
            });
        } else {
            throw new Error(data.message || 'Failed to remove coupon');
        }
    } catch (error) {
        console.error("Error in Remove Coupon:", error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to remove coupon',
            timer: 1500
        });
    }
}

</script>

<script src="/javascript/checkoutAddressManagement.js"></script>